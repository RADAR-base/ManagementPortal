import org.gradle.internal.os.OperatingSystem

plugins {
    id 'org.springframework.boot' version '1.5.9.RELEASE'
    id "com.moowork.node" version "1.2.0"
    id "io.spring.dependency-management" version "1.0.7.RELEASE"
    id 'com.jfrog.bintray' version '1.8.4' apply false
    id 'com.jfrog.artifactory' version '4.9.3' apply false
}

allprojects {
    group 'org.radarcns'

    version '0.5.9-SNAPSHOT' // project version

    // The comment on the previous line is only there to identify the project version line easily
    // with a sed command, to auto-update the version number with the prepare-release-branch.sh
    // script, do not remove it.

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'idea'

    ext.codacyVersion = '4.0.5'
    ext.githubRepoName = 'RADAR-base/ManagementPortal'
    ext.githubUrl = 'https://github.com/RADAR-base/ManagementPortal'
    ext.issueUrl = "https://github.com/$githubRepoName/issues"
    ext.website = 'http://radar-base.org'

    idea {
        module {
            downloadSources = true
        }
    }
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

description = 'MangementPortal application to manage studies and participants'

apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: 'com.moowork.node'
apply plugin: 'io.spring.dependency-management'

defaultTasks 'bootRun'

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
}


bootRepackage {
    mainClass = 'org.radarcns.management.ManagementPortalApp'
}

springBoot {
    mainClass = 'org.radarcns.management.ManagementPortalApp'
    executable = true
    buildInfo()
}

if (OperatingSystem.current().isWindows()) {
    task pathingJar(type: Jar) {
        dependsOn configurations.runtime
        appendix = 'pathing'

        doFirst {
            manifest {
                attributes 'Class-Path': configurations.runtime.files.collect {
                    it.toURI().toURL().toString().replaceFirst(/file:\/+/, '/').replaceAll(' ', '%20')
                }.join(' ')
            }
        }
    }

    bootRun {
        addResources = false
        dependsOn pathingJar
        doFirst {
            classpath = files("$buildDir/classes/java/main", "$buildDir/resources/main", pathingJar.archivePath)
        }
    }
} else {
    bootRun {
        addResources = false
    }
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}


apply from: 'gradle/liquibase.gradle'
apply from: 'gradle/gatling.gradle'
apply from: 'gradle/mapstruct.gradle'
apply from: 'gradle/docker.gradle'
apply from: 'gradle/style.gradle'
apply from: 'gradle/openapi.gradle'

if (project.hasProperty('prod')) {
    apply from: 'gradle/profile_prod.gradle'
} else {
    apply from: 'gradle/profile_dev.gradle'
}

if (project.hasProperty('graphite')) {
    apply from: 'gradle/graphite.gradle'
}

//ext.moduleDescription = 'Management Portal application'
ext.findbugAnnotationVersion = '3.0.2'

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://oss.jfrog.org/artifactory/libs-snapshot/' }
    maven { url 'https://dl.bintray.com/radar-cns/org.radarcns' }
}

dependencies {
    compile "io.github.jhipster:jhipster:${jhipster_server_version}"
    compile "io.dropwizard.metrics:metrics-core:${dropwizard_metrics_version}"
    compile "io.dropwizard.metrics:metrics-jcache:${dropwizard_metrics_version}"
    compile "io.dropwizard.metrics:metrics-jvm:${dropwizard_metrics_version}"
    compile "io.dropwizard.metrics:metrics-servlet:${dropwizard_metrics_version}"
    compile "io.dropwizard.metrics:metrics-json:${dropwizard_metrics_version}"
    compile "io.dropwizard.metrics:metrics-servlets:${dropwizard_metrics_version}"
    compile("net.logstash.logback:logstash-logback-encoder:${logstash_logback_encoder_version}") {
        exclude(group: 'ch.qos.logback')
    }
    compile "com.fasterxml.jackson.datatype:jackson-datatype-json-org:${jackson_dataformat_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hppc:${jackson_dataformat_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jackson_dataformat_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:${jackson_dataformat_version}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${jackson_dataformat_version}"
    compile "com.fasterxml.jackson.core:jackson-annotations:${jackson_dataformat_version}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
    compile("com.ryantenney.metrics:metrics-spring:${metrics_spring_version}")
    compile "com.hazelcast:hazelcast"
    compile "com.hazelcast:hazelcast-hibernate52:${hazelcast_hibernate52_version}"
    compile "com.hazelcast:hazelcast-spring"
    compile "javax.cache:cache-api"
    compile "org.hibernate:hibernate-core:${hibernate_version}"
    compile("com.zaxxer:HikariCP:${hikaricp_version}")
    compile "org.apache.commons:commons-lang3:${commons_lang_version}"
    compile "commons-io:commons-io:${commons_io_version}"
    compile "javax.transaction:javax.transaction-api"
    compile group: 'javax.ws.rs', name: 'jsr311-api', version: '1.1.1'
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: findbugAnnotationVersion
    compile "org.hibernate:hibernate-envers:${hibernate_version}"
    compile "org.hibernate:hibernate-validator"
    compile("org.liquibase:liquibase-core")
    compile "com.mattbertolini:liquibase-slf4j:${liquibase_slf4j_version}"
    compile "org.springframework.boot:spring-boot-actuator"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.springframework.boot:spring-boot-loader-tools"
    compile "org.springframework.boot:spring-boot-starter-mail"
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-starter-aop"
    compile ("org.springframework.boot:spring-boot-starter-data-jpa") {
        exclude group: 'org.hibernate', module: 'hibernate-entitymanager'
    }
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.cloud:spring-cloud-starter-zuul:${zuul_proxy_version}"
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'spring-boot-starter-tomcat'
    }
    compile "org.springframework.boot:spring-boot-starter-undertow"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    compile("org.springframework:spring-context-support")
    compile "org.springframework.security:spring-security-config"
    compile "org.springframework.security:spring-security-data"
    compile ("org.springframework.security:spring-security-web"){
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
    }
    compile "org.springframework.security:spring-security-jwt"
    compile "org.springframework.security.oauth:spring-security-oauth2:${spring_security_oauth2_version}"
    compile("io.springfox:springfox-swagger2:${springfox_version}") {
        exclude module: 'mapstruct'
    }
    compile "io.springfox:springfox-bean-validators:${springfox_version}"
    compile "org.postgresql:postgresql"
    compile "com.h2database:h2"
    compile project(path: ':radar-auth', configuration: 'shadow')
    compile "org.springframework.data:spring-data-envers:${spring_data_envers_version}"

    testCompile "org.awaitility:awaitility:${awaitility_version}"
    testCompile "com.jayway.jsonpath:json-path"
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.springframework.security:spring-security-test"
    testCompile "org.springframework.boot:spring-boot-test"
    testCompile "org.assertj:assertj-core:${assertj_version}"
    testCompile "junit:junit"
    testCompile "org.mockito:mockito-core"
    testCompile "com.mattbertolini:liquibase-slf4j:${liquibase_slf4j_version}"
    testCompile "org.hamcrest:hamcrest-library"
    annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
}

clean {
    delete "target"
}

task cleanResources(type: Delete) {
    delete 'build/resources'
}

wrapper {
    gradleVersion '5.4.1'
}

task stage(dependsOn: 'bootRepackage') {
}

if (project.hasProperty('nodeInstall')) {
    node {
        version = "${node_version}"
        npmVersion = "${npm_version}"
        yarnVersion = "${yarn_version}"
        download = true
    }
}

compileJava.dependsOn processResources
processResources.dependsOn cleanResources, bootBuildInfo
bootBuildInfo.mustRunAfter cleanResources

task downloadDependencies {
    description "Pre-downloads dependencies"
    configurations.compileClasspath.files
    configurations.runtimeClasspath.files
}

apply from: 'gradle/publishing.gradle'

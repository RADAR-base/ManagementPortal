import org.gradle.internal.os.OperatingSystem
import java.util.concurrent.TimeUnit

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}")
    }
}

plugins {
    id 'application'
    id 'org.springframework.boot' version "${spring_boot_version}"
    id "com.github.node-gradle.node" version "3.6.0"
    id "io.spring.dependency-management" version "1.1.3"
    id 'de.undercouch.download' version '5.5.0' apply false
    id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
}

apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: 'com.github.node-gradle.node'
apply plugin: 'io.spring.dependency-management'

repositories {
    mavenCentral()
}

allprojects {
    group 'org.radarbase'
    version '0.8.3' // project version

    // The comment on the previous line is only there to identify the project version line easily
    // with a sed command, to auto-update the version number with the prepare-release-branch.sh
    // script, do not remove it.

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'idea'

    ext.codacyVersion = '4.0.5'
    ext.githubRepoName = 'RADAR-base/ManagementPortal'
    ext.githubUrl = 'https://github.com/RADAR-base/ManagementPortal'
    ext.issueUrl = "https://github.com/$githubRepoName/issues"
    ext.website = 'http://radar-base.org'

    idea {
        module {
            downloadSources = true
        }
    }

    tasks.register("ghPages") {
        dependsOn(provider {
            tasks.findAll { task -> task.name.startsWith("ghPages") && task.name != "ghPages" }
        })
    }
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

description = 'MangementPortal application to manage studies and participants'

defaultTasks 'bootRun'

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
}

application {
    mainClass.set('org.radarbase.management.ManagementPortalApp')
    applicationDefaultJvmArgs = [
            '--add-modules', 'java.se',
            '--add-exports', 'java.base/jdk.internal.ref=ALL-UNNAMED',
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
            '--add-opens', 'java.base/java.nio=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED',
            '--add-opens', 'java.management/sun.management=ALL-UNNAMED',
            '--add-opens', 'jdk.management/com.sun.management.internal=ALL-UNNAMED',
    ]
}

bootWar {
    launchScript()
}

springBoot {
    buildInfo()
}

bootRun {
    sourceResources sourceSets.main
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

test {
    jvmArgs = [
            '--add-modules', 'java.se',
            '--add-exports', 'java.base/jdk.internal.ref=ALL-UNNAMED',
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
            '--add-opens', 'java.base/java.nio=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED',
            '--add-opens', 'java.management/sun.management=ALL-UNNAMED',
            '--add-opens', 'jdk.management/com.sun.management.internal=ALL-UNNAMED',
    ]
    testLogging {
        exceptionFormat = 'full'
    }
    useJUnitPlatform()
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}


apply from: 'gradle/liquibase.gradle'
apply from: 'gradle/gatling.gradle'
apply from: 'gradle/mapstruct.gradle'
apply from: 'gradle/docker.gradle'
apply from: 'gradle/style.gradle'
apply from: 'gradle/openapi.gradle'

if (project.hasProperty('prod')) {
    apply from: 'gradle/profile_prod.gradle'
} else {
    apply from: 'gradle/profile_dev.gradle'
}

if (project.hasProperty('graphite')) {
    apply from: 'gradle/graphite.gradle'
}

//ext.moduleDescription = 'Management Portal application'
ext.findbugAnnotationVersion = '3.0.2'

dependencies {
    implementation("tech.jhipster:jhipster-framework:${jhipster_server_version}")
    implementation("tech.jhipster:jhipster-dependencies:${jhipster_server_version}")
    implementation("io.micrometer:micrometer-core")
    runtimeOnly "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv"
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.hazelcast:hazelcast:${hazelcast_version}"
    implementation "com.hazelcast:hazelcast-spring:${hazelcast_version}"
    runtimeOnly "com.hazelcast:hazelcast-hibernate53:${hazelcast_hibernate53_version}"
    runtimeOnly("com.zaxxer:HikariCP:${hikaricp_version}")
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: findbugAnnotationVersion
    implementation("org.liquibase:liquibase-core:${liquibase_version}")
    implementation("org.apache.commons:commons-lang3")
    runtimeOnly "com.mattbertolini:liquibase-slf4j:${liquibase_slf4j_version}"
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-autoconfigure")
    implementation "org.springframework.boot:spring-boot-starter-mail"
    runtimeOnly "org.springframework.boot:spring-boot-starter-logging"
    runtimeOnly ("org.springframework.boot:spring-boot-starter-data-jpa") {
        exclude group: 'org.hibernate', module: 'hibernate-entitymanager'
    }
    implementation "org.hibernate:hibernate-core"
    implementation "org.hibernate:hibernate-envers"
    implementation "org.hibernate:hibernate-validator:${hibernate_validator_version}"

    runtimeOnly "org.postgresql:postgresql:${postgresql_version}"
    runtimeOnly "org.hsqldb:hsqldb:${hsqldb_version}"

    runtimeOnly "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.security:spring-security-data"

    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'spring-boot-starter-tomcat'
    }
    implementation ("org.springframework.boot:spring-boot-starter-undertow")
    // Fix vulnerabilities
    runtimeOnly("io.undertow:undertow-websockets-jsr:2.2.25.Final")
    runtimeOnly("io.undertow:undertow-servlet:2.2.25.Final")
    runtimeOnly("io.undertow:undertow-core:2.2.25.Final")

    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    runtimeOnly("org.thymeleaf:thymeleaf:${thymeleaf_version}")
    runtimeOnly("org.thymeleaf:thymeleaf-spring5:${thymeleaf_version}")
    implementation("org.springframework:spring-context-support")
    implementation("org.springframework:spring-jdbc")
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-data"
    implementation ("org.springframework.security:spring-security-web") {
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
    }
    implementation("org.springframework.session:spring-session-hazelcast")

    implementation("org.springframework.security.oauth:spring-security-oauth2:2.5.2.RELEASE")
    implementation("org.springframework.security:spring-security-oauth2-resource-server:5.8.10")
    implementation("org.springframework.security:spring-security-oauth2-jose")
    implementation("io.springfox:springfox-swagger2:${springfox_version}") {
        exclude module: 'mapstruct'
    }
    implementation("javax.inject:javax.inject:1")
    implementation "io.springfox:springfox-bean-validators:${springfox_version}"
    implementation "org.postgresql:postgresql:${postgresql_version}"
    implementation project(path: ':radar-auth', configuration: 'shadow')
    implementation "org.springframework.data:spring-data-envers"
    runtimeOnly("jakarta.xml.bind:jakarta.xml.bind-api:${javax_xml_bind_version}")
    runtimeOnly("org.glassfish.jaxb:jaxb-core:${javax_jaxb_core_version}")
    runtimeOnly("org.glassfish.jaxb:jaxb-runtime:${javax_jaxb_runtime_version}")
    runtimeOnly("javax.activation:activation:${javax_activation}")
    runtimeOnly 'org.javassist:javassist:3.29.2-GA'

    testImplementation "com.jayway.jsonpath:json-path:2.8.0"
    testImplementation ("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "com.vaadin.external.google", module:"android-json"
        exclude group: "junit", module: "junit"
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "net.bytebuddy:byte-buddy:1.12.18"
    testImplementation "org.assertj:assertj-core:${assertj_version}"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.mockito:mockito-core"
    testImplementation "com.mattbertolini:liquibase-slf4j:${liquibase_slf4j_version}"
    testImplementation "org.hamcrest:hamcrest-library"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2020.0.4"
        mavenBom "org.springframework.session:spring-session-bom:2021.0.2"
        mavenBom "com.fasterxml.jackson:jackson-bom:$jackson_version"
        mavenBom "org.springframework:spring-framework-bom:$spring_framework_version"
        mavenBom "org.springframework.boot:spring-boot-dependencies:$spring_boot_version"
        mavenBom "org.springframework.data:spring-data-bom:$spring_data_version"
    }
}

clean {
    delete "target"
}

tasks.register('cleanResources', Delete) {
    delete 'build/resources'
}

wrapper {
    gradleVersion '8.3'
}

tasks.register('stage') {
    dependsOn 'bootWar'
}

tasks.register('ghPagesJavadoc', Copy) {
    from javadoc.destinationDir
    into file("$rootDir/public/management-portal-javadoc")
    dependsOn tasks.named('javadoc')
}

tasks.register('ghPagesOpenApiSpec', Copy) {
    from file(layout.buildDirectory.dir("swagger-spec"))
    into file("$rootDir/public/apidoc")
}

compileJava.dependsOn processResources
processResources.dependsOn cleanResources, bootBuildInfo
bootBuildInfo.mustRunAfter cleanResources

tasks.register('downloadDependencies') {
    description "Pre-downloads dependencies"
    configurations.compileClasspath.files
    configurations.runtimeClasspath.files
}

ext.projectLanguage = "java"
apply from: 'gradle/artifacts.gradle'

nexusPublishing {
    repositories {
        sonatype {
            username = project.hasProperty("ossrh.user") ? project.property("ossrh.user") : System.getenv("OSSRH_USER")
            password = project.hasProperty("ossrh.password") ? project.property("ossrh.password") : System.getenv("OSSRH_PASSWORD")
        }
    }
}


class TimingsListener implements TaskExecutionListener, BuildListener {
    private long startTime
    private timings = []

    @Override
    void beforeExecute(Task task) {
        startTime = System.nanoTime()
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        def ms = TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);
        timings.add([ms, task.path])
        task.project.logger.warn "${task.path} took ${ms}ms"
    }

    @Override
    void buildFinished(BuildResult result) {
        println "Task timings:"
        for (timing in timings) {
            if (timing[0] >= 50) {
                printf "%7sms  %s\n", timing
            }
        }
    }

    @Override
    void projectsEvaluated(Gradle gradle) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void settingsEvaluated(Settings settings) {}
}
if (project.hasProperty('dev')) {
    gradle.addListener new TimingsListener()
}


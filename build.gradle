import org.gradle.internal.os.OperatingSystem
import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.codegen.DefaultGenerator

import java.nio.file.Paths

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "http://repo.spring.io/plugins-release" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
//        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.1"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.9"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}"
        classpath "org.springframework.build.gradle:propdeps-plugin:0.0.7"
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE"
        classpath "io.swagger:swagger-codegen:2.4.1"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.8.1"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here
    }
}

allprojects {
    group 'org.radarcns'

    version '0.5.3-SNAPSHOT' // project version

    // The comment on the previous line is only there to identify the project version line easily
    // with a sed command, to auto-update the version number with the prepare-release-branch.sh
    // script, do not remove it.

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'
    apply plugin: 'com.jfrog.artifactory'

    ext {
        githubRepoName = 'RADAR-base/ManagementPortal'


        githubUrl = 'https://github.com/' + githubRepoName + '.git'
        issueUrl = 'https://github.com/' + githubRepoName + '/issues'
        website = 'http://radar-base.org'

        pomConfig = {
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            developers {
                developer {
                    id 'dennyverbeeck'
                    name 'Denny Verbeeck'
                    email 'dverbeec@its.jnj.com'
                    organization 'Janssen R&D'
                }
                developer {
                    id 'nivemaham'
                    name 'Nivethika Mahasivam'
                    email 'nivethika@thehyve.nl'
                    organization 'The Hyve'
                }
                developer {
                    id 'blootsvoets'
                    name 'Joris Borgdorff'
                    email 'joris@thehyve.nl'
                    organization 'The Hyve'
                }
            }
            issueManagement {
                system 'GitHub'
                url githubUrl + '/issues'
            }
            organization {
                name 'RADAR-base'
                url website
            }
            scm {
                connection 'scm:git:' + githubUrl
                url githubUrl
            }
        }
    }

    idea {
        module {
            downloadSources = true
        }
    }

    //---------------------------------------------------------------------------//
    // Style checking                                                            //
    //---------------------------------------------------------------------------//

    checkstyle {
        toolVersion = '8.7'
        ignoreFailures = false
        maxWarnings = 0

        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    }

    pmd {
        toolVersion = '5.8.1'
        ignoreFailures = false

        consoleOutput = true

        ruleSets = []
        ruleSetFiles = rootProject.files("config/pmd/ruleset.xml")
    }

    pmdTest {
        ruleSetFiles = rootProject.files("config/pmd/test_ruleset.xml")
    }

    artifactory {
        contextUrl = 'https://oss.jfrog.org/artifactory'
        publish {
            repository {
                repoKey = 'oss-snapshot-local'
                username = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
                password = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
                maven = true
            }
            defaults {
                publishArtifacts = true
                publishPom = true
                properties = ['qa.level': 'basic']
            }
        }
    }
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: 'propdeps'
apply plugin: 'com.moowork.node'
apply plugin: 'io.spring.dependency-management'
defaultTasks 'bootRun'

configurations {
    codacy
    providedRuntime
    compile.exclude module: "spring-boot-starter-tomcat"
    cucumberTestCompile.extendsFrom testCompile
    cucumberTestRuntime.extendsFrom testRuntime
}

sourceSets {
    cucumberTest {
        java {
            compileClasspath += main.output + test.output + test.compileClasspath
            runtimeClasspath += main.output + test.output + test.compileClasspath
            srcDir file('src/cucumberTest/java')
        }
        resources {
            srcDir 'src/cucumberTest/resources'
        }
    }
}

bootRepackage {
    mainClass = 'org.radarcns.management.ManagementPortalApp'
}

springBoot {
    mainClass = 'org.radarcns.management.ManagementPortalApp'
    executable = true
    buildInfo()
}

if (OperatingSystem.current().isWindows()) {
    task pathingJar(type: Jar) {
        dependsOn configurations.runtime
        appendix = 'pathing'

        doFirst {
            manifest {
                attributes 'Class-Path': configurations.runtime.files.collect {
                    it.toURL().toString().replaceFirst(/file:\/+/, '/').replaceAll(' ', '%20')
                }.join(' ')
            }
        }
    }

    bootRun {
        addResources = false
        dependsOn pathingJar
        doFirst {
            classpath = files("$buildDir/classes/java/main", "$buildDir/resources/main", pathingJar.archivePath)
        }
    }
} else {
    bootRun {
        addResources = false
    }
}

task cucumberTest(type: Test) {
    testClassesDirs = sourceSets.cucumberTest.output.classesDirs
    classpath = sourceSets.cucumberTest.runtimeClasspath

    testLogging {
        events "skipped", "failed", "passed"
    }

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    reports.html.enabled = true
}

test.finalizedBy(cucumberTest)

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
    reportOn cucumberTest
}

cucumberTest.finalizedBy(testReport)

//apply from: 'gradle/sonar.gradle'
apply from: 'gradle/liquibase.gradle'
apply from: 'gradle/gatling.gradle'
apply from: 'gradle/mapstruct.gradle'
apply from: 'gradle/docker.gradle'
//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

if (project.hasProperty('prod')) {
    apply from: 'gradle/profile_prod.gradle'
} else {
    apply from: 'gradle/profile_dev.gradle'
}

if (project.hasProperty('graphite')) {
    apply from: 'gradle/graphite.gradle'
}

ext {
    codacyVersion = '4.0.3'
    moduleDescription = ''
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://oss.jfrog.org/artifactory/libs-snapshot/' }
    maven { url 'https://dl.bintray.com/radar-cns/org.radarcns' }
    maven { url 'http://repo.spring.io/milestone' }
    maven { url 'http://repo.spring.io/snapshot' }
    maven { url 'https://repository.jboss.org/nexus/content/repositories/releases' }
    maven { url 'https://oss.sonatype.org/content/repositories/releases' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'http://repo.maven.apache.org/maven2' }
}

dependencies {
    compile "io.github.jhipster:jhipster:${jhipster_server_version}"
    compile "io.dropwizard.metrics:metrics-core:${dropwizard_metrics_version}"
    compile "io.dropwizard.metrics:metrics-jcache:${dropwizard_metrics_version}"
    compile "io.dropwizard.metrics:metrics-jvm:${dropwizard_metrics_version}"
    compile "io.dropwizard.metrics:metrics-servlet:${dropwizard_metrics_version}"
    compile "io.dropwizard.metrics:metrics-json:${dropwizard_metrics_version}"
    compile "io.dropwizard.metrics:metrics-servlets:${dropwizard_metrics_version}"
    compile("net.logstash.logback:logstash-logback-encoder:${logstash_logback_encoder_version}") {
        exclude(group: 'ch.qos.logback')
    }
    compile "com.fasterxml.jackson.datatype:jackson-datatype-json-org"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-csv"
    compile "com.fasterxml.jackson.core:jackson-annotations"
    compile "com.fasterxml.jackson.core:jackson-databind"
    compile("com.ryantenney.metrics:metrics-spring:${metrics_spring_version}")
    compile "com.hazelcast:hazelcast"
    compile "com.hazelcast:hazelcast-hibernate52:${hazelcast_hibernate52_version}"
    compile "com.hazelcast:hazelcast-spring"
    compile "javax.cache:cache-api"
    compile "org.hibernate:hibernate-core:${hibernate_version}"
    compile("com.zaxxer:HikariCP:${hikaricp_version}")
    compile "org.apache.commons:commons-lang3:${commons_lang_version}"
    compile "commons-io:commons-io:${commons_io_version}"
    compile "javax.transaction:javax.transaction-api"
    compile "org.hibernate:hibernate-envers:${hibernate_version}"
    compile "org.hibernate:hibernate-validator"
    compile("org.liquibase:liquibase-core")
    compile "com.mattbertolini:liquibase-slf4j:${liquibase_slf4j_version}"
    compile "org.springframework.boot:spring-boot-actuator"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.springframework.boot:spring-boot-loader-tools"
    compile "org.springframework.boot:spring-boot-starter-mail"
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-starter-aop"
    compile ("org.springframework.boot:spring-boot-starter-data-jpa") {
        exclude group: 'org.hibernate', module: 'hibernate-entitymanager'
    }
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.cloud:spring-cloud-starter-zuul:${zuul_proxy_version}"
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: 'spring-boot-starter-tomcat'
    }
    compile "org.springframework.boot:spring-boot-starter-undertow"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    compile "org.springframework.boot:spring-boot-starter-cloud-connectors"
    compile("org.springframework:spring-context-support")
    compile "org.springframework.security:spring-security-config"
    compile "org.springframework.security:spring-security-data"
    compile "org.springframework.security:spring-security-web"
    compile "org.springframework.security:spring-security-jwt"
    compile "org.springframework.security.oauth:spring-security-oauth2:${spring_security_oauth2_version}"
    compile("io.springfox:springfox-swagger2:${springfox_version}") {
        exclude module: 'mapstruct'
    }
    compile "io.springfox:springfox-bean-validators:${springfox_version}"
//    compile "mysql:mysql-connector-java"
    compile "org.postgresql:postgresql"
    compile "com.h2database:h2"
    compile "org.mapstruct:mapstruct-jdk8:${mapstruct_version}"
    compile project(":radar-auth")
    compile "org.springframework.data:spring-data-envers:${spring_data_envers_version}"

    codacy group: 'com.codacy', name: 'codacy-coverage-reporter', version: codacyVersion

    testCompile "org.awaitility:awaitility:${awaitility_version}"
    testCompile "com.jayway.jsonpath:json-path"
    testCompile "info.cukes:cucumber-junit:${cucumber_version}"
    testCompile "info.cukes:cucumber-spring:${cucumber_version}"
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.springframework.security:spring-security-test"
    testCompile "org.springframework.boot:spring-boot-test"
    testCompile "org.assertj:assertj-core:${assertj_version}"
    testCompile "junit:junit"
    testCompile "org.mockito:mockito-core"
    testCompile "com.mattbertolini:liquibase-slf4j:${liquibase_slf4j_version}"
    testCompile "org.hamcrest:hamcrest-library"
    optional "org.springframework.boot:spring-boot-configuration-processor:${spring_boot_version}"
    //jhipster-needle-gradle-dependency - JHipster will add additional dependencies here
}

clean {
    delete "target"
}

task cleanResources(type: Delete) {
    delete 'build/resources'
}

wrapper {
    gradleVersion '4.10.2'
}

task stage(dependsOn: 'bootRepackage') {
}

if (project.hasProperty('nodeInstall')) {
    node {
        version = "${node_version}"
        npmVersion = "${npm_version}"
        yarnVersion = "${yarn_version}"
        download = true
    }
}

compileJava.dependsOn processResources
processResources.dependsOn cleanResources, bootBuildInfo
bootBuildInfo.mustRunAfter cleanResources

idea.module.downloadSources = true

task generateOpenApiSpec(dependsOn: 'classes', group: 'Swagger',
        description: 'Fetch the OpenAPI spec from the Swagger endpoint. The application needs to be running at http://localhost:8080/.') {
    outputs.file(swaggerFileLocation)
    doLast {
        // Create parent dir to swagger file
        File swaggerFile = new File(swaggerFileLocation);
        swaggerFile.getParentFile().mkdirs();

        def generated = false

        println()
        for (def i = 0; i < 20; i++) {
            ProcessBuilder curlPb = new ProcessBuilder("curl", apiDocsEndpoint, "-o",
                    swaggerFileLocation, "--connect-timeout", "1")
            curlPb.directory(projectDir)
            Process curlProcess = curlPb.start()
            curlProcess.waitFor()
            generated = curlProcess.exitValue() == 0
            if (generated) {
                break
            }
            System.out.print("#")
            System.out.flush()
            sleep(5000)
        }
        if (!generated) {
            throw new GradleException('Swagger file could not be generated')
        }
        println()
        println("Swagger file generated at " + swaggerFileLocation)
    }
}

task generateJavaClient(dependsOn: 'generateOpenApiSpec', group: 'Swagger',
        description: 'Generate a Java client library for ManagementPortal') {
    inputs.file(swaggerFileLocation)
    outputs.dir(swaggerTargetFolder)
    doLast {
        // if gradle determined this task is out of date, first delete the directory
        File targetFolder = new File(projectDir.absolutePath, swaggerTargetFolder)
        if (targetFolder.exists()) {
            targetFolder.deleteDir()
        }
        def config = new CodegenConfigurator()
        config.setInputSpec(Paths.get(projectDir.absolutePath, swaggerFileLocation).toString())
        config.setOutputDir(Paths.get(projectDir.absolutePath, swaggerTargetFolder).toString())
        config.setLang("java")
        config.setArtifactId("managementportal-client")
        config.setGroupId("org.radarcns")
        config.setArtifactVersion(version)
        config.setAdditionalProperties([
                'apiPackage'    : 'org.radarcns.management.client.api',
                'modelPackage'  : 'org.radarcns.management.client.model',
                'appName'       : rootProject.name,
                'appDescription': moduleDescription,
                'licenceUrl'    : 'http://apache.org/licenses/LICENSE-2.0.html'
        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
        file("managementportal-client/build.gradle") << file("mp-client-publishing.txt").text
        println("Client generated at " + swaggerTargetFolder)
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
    dependsOn test
}

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = 'com.codacy.CodacyCoverageReporter'
    classpath = configurations.codacy
    args = ['report', '-l', 'Java', '-r', "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"]
}

ext.sharedManifest = manifest {
    attributes("Implementation-Title": project.name,
            "Implementation-Version": version)
}

jar {
    manifest.from sharedManifest
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest.from sharedManifest
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    manifest.from sharedManifest
}

publishing {
    publications {
        ManagementPortalPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                description = moduleDescription
                name = project.name
                url = githubUrl
            }

            pom.withXml {
                asNode().children().last() + pomConfig
            }
        }
    }
}

bintray {
    user project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    override false
    publications 'ManagementPortalPublication'
    pkg {
        repo = project.group
        name = project.name
        userOrg = 'radar-cns'
        desc = moduleDescription
        licenses = ['Apache-2.0']
        websiteUrl = website
        issueTrackerUrl = issueUrl
        vcsUrl = githubUrl
        githubRepo = githubRepoName
        githubReleaseNotesFile = 'README.md'
        version {
            name = project.version
            desc = moduleDescription
            vcsTag = System.getenv('TRAVIS_TAG')
            released = new Date()
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
            }
        }
    }
}

bintrayUpload.dependsOn 'assemble'

artifactoryPublish {
    publications 'ManagementPortalPublication'
    dependsOn 'assemble'
}

task downloadDependencies {
    description "Pre-downloads dependencies"
    configurations.compileClasspath.files
    configurations.runtimeClasspath.files
}
